# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14ef0fU0K3nbmX8nx88-3nXu8PyjwN4_s
"""

import streamlit as st
import zipfile
import io
import random
import requests

# ヒント生成関数
def generate_hint(answer: str) -> str:
    hint = ""
    for char in answer:
        if char.isalpha() or ('ぁ' <= char <= 'ん') or ('ァ' <= char <= 'ン') or ('一' <= char <= '龥'):
            hint += "〇"
        elif char == " ":
            hint += "□"
        else:
            hint += char
    return hint

# ファイル名から答えを抽出
def extract_answer(filename: str) -> str:
    name = filename.rsplit("/", 1)[-1]
    name = name.rsplit(".", 1)[0]
    parts = name.split("_", 1)
    return parts[1] if len(parts) == 2 else parts[0]

# セッション状態の初期化
for key, default in {
    "questions": [],
    "current_q": 0,
    "score": 0,
    "zip_data": None,
    "played": False,
    "answered": False,
}.items():
    if key not in st.session_state:
        st.session_state[key] = default

# タイトルと説明
st.title("🎮 インターネット検定楽曲編（Dropboxリンク式）")
st.markdown("""
#### 📝 説明
- 曲の一部が流れます。
- **ひらがな、アルファベットの小文字**で回答してください。
- **スペース（□）、ドット、記号**はヒントとして表示されます。回答時はヒントも入力してください。
- **200問以上の中からランダムで100問**出題されます。順次追加予定。
- 問題は**一度しか流れません**。
- 出題基準は「**インターネットを見ていれば回答できる**」です。
- 音量が一定でないので、**音量の上げすぎにはご注意ください**。
- https://www.dropbox.com/scl/fi/micl05gjrjslmmcqjh9n3/mp3-2.zip?rlkey=55537f5qurswix73z9ogkkrax&st=1slb2y4v&raw=1

""")

# Dropboxリンク入力欄
dropbox_url = st.text_input("📎 DropboxのZIPファイルリンクを入力（末尾は ?raw=1 にしてください）")

# 初回ロード時にZIPを読み込む
if dropbox_url and not st.session_state.questions:
    with st.spinner("ZIPファイルをダウンロード中..."):
        response = requests.get(dropbox_url)
        st.session_state.zip_data = io.BytesIO(response.content)

        with zipfile.ZipFile(st.session_state.zip_data) as z:
            mp3_files = sorted([f for f in z.namelist() if f.endswith(".mp3")])
            random.shuffle(mp3_files)
            st.session_state.questions = mp3_files[:100]

# クイズ進行
if st.session_state.questions:
    current_idx = st.session_state.current_q

    # クイズ終了判定
    if current_idx >= len(st.session_state.questions):
        st.markdown("---")
        st.header("🏁 クイズ終了！")
        st.write(f"あなたのスコア：**{st.session_state.score} / {len(st.session_state.questions)}**")
        st.balloons()
        # リセット
        for key in ["questions", "current_q", "score", "zip_data", "played", "answered"]:
            st.session_state[key] = {
                "questions": [],
                "current_q": 0,
                "score": 0,
                "zip_data": None,
                "played": False,
                "answered": False,
            }[key]
        st.stop()

    mp3_file = st.session_state.questions[current_idx]

    with zipfile.ZipFile(st.session_state.zip_data) as z:
        correct_answer = extract_answer(mp3_file).strip()

        # 音声は一度だけ再生
        if not st.session_state.played:
            mp3_data = z.read(mp3_file)
            st.audio(mp3_data, format="audio/mp3")
            st.session_state.played = True

    st.subheader(f"🎵 第 {current_idx + 1} 問")
    st.write("🔍 ヒント：" + generate_hint(correct_answer))

    # ユーザー入力欄（常に表示）
    user_input = st.text_input("答えを入力（ひらがな・英小文字）", key=f"answer_{current_idx}")

    # 回答ボタン（未回答時のみ表示）
    if not st.session_state.answered and st.button("回答する"):
        st.session_state.answered = True
        if user_input.strip() == correct_answer:
            st.success("🎉 正解！")
            st.session_state.score += 1
        else:
            st.error(f"❌ 不正解… 正解は「{correct_answer}」でした")

    # 次の問題へ（回答済みのときのみ表示）
    if st.session_state.answered:
        if st.button("次の問題へ"):
            st.session_state.current_q += 1
            st.session_state.played = False
            st.session_state.answered = False